#!/usr/bin/env python2
""" This program parses, through stdin, a file containing multiple
choice questions and answers. Each question is expected to have four
possible answers, with the first question being the correct one. The
input file is expected to be in the following format: each question
and its answers are separated by a single line break, and new question
is preceded by two line breaks.

Question set format:
# topic
## subtopic
### subtopics
question
correct answer
answer
answer
answer

WARNING: Any question that is not followed by four non-whitespace-only
lines will be discarded. An error message will be sent to stderr with
the line number of the improperly formatted question set.

"""
from __future__ import division, print_function
import sys
import MySQLdb

try:
    db = MySQLdb.connect('localhost', 'siquoia', 'siquoia', 'siquoia')
    db.autocommit(True)
    c = db.cursor()
    c.execute("SELECT VERSION();")
    version = c.fetchone()[0]
    print("Database version: {}".format(version), file=sys.stderr)
except:
    print("Doh!", file=sys.stderr)
    sys.exit(1)

def question_set(FILE, topic_table):
    """ This function reads a file and yields a question and its four
    answers in a set (question, correct_answer, answer1, answer2,
    answer3), one at a time until it reaches the end of file.
    """
    q_set = []         # q_set contains a question and
                       # its four answers in the order
                       # (question, correct_answer, answer1,
                       # answer2, answer3)

    linenum = 0        # linenum keeps track the line number
                       # of the line currently being parsed.

    q_linenum = 0      # line number before the most recently
                       # parsed question

    topic = {'#':'topic', '##':'subtopic', '###':'subsubtopic'}

    for line in FILE:
        linenum += 1

        if line[0] == '#':
            # process topic/subtopic/subsubtopic
            temp = line.split(' ', 1)
            topic_table[topic[temp[0]]] = temp[1].rstrip()
        elif line.isspace() and len(q_set) == 5:
            q_linenum = linenum + 1
            yield q_set
            q_set = []
        elif line.isspace() and len(q_set) < 5:
            print("\nERROR: the question at line {} "
                  "has fewer than four "
                  "answers.\n\n".format(q_linenum), file=sys.stderr)
            q_set = []
        elif line.isspace() and len(q_set) > 5:
            print("\nERROR: the question at line {} "
                  "has more than four "
                  "answers.\n\n".format(q_linenum), file=sys.stderr)
            q_set = [] 
        else:
            q_set.append(line.rstrip())

    # parse last question set.
    if len(q_set) == 5:
        yield q_set
    elif line.isspace():
        return
    else:
        exit("\nERROR: the last question in the input file "
             "does not have exactly four answers.\n\n")

numquestions = 0
topic_table = {}
need_to_parse_topics = True
for (q, correct_answer, answer1, answer2, answer3) \
        in question_set(sys.stdin, topic_table):
    numquestions += 1

    if need_to_parse_topics:
        try:
            topic = MySQLdb.escape_string(topic_table['topic'])
            # insert new topic into database if it doesn't exist
            query = "INSERT INTO topics (topic) VALUES ('{}')" \
                    " ON DUPLICATE KEY UPDATE id=id".format(topic)
            c.execute(query)
            c.execute("SELECT id FROM topics WHERE topic='{}'".format(topic))
            topic_id = c.fetchone()[0]
        except:
            topic_id = "NULL"
            print("WARNING: no topic found.", file=sys.stderr)
        try:
            subtopic = MySQLdb.escape_string(topic_table['subtopic'])
            # insert new subtopic into database if it doesn't exist
            query = "INSERT INTO subtopics (subtopic, topic_id)" \
                    " VALUES ('{}', {})" \
                    " ON DUPLICATE KEY" \
                    " UPDATE topic_id=topic_id".format(subtopic, topic_id)
            c.execute(query)
            c.execute("SELECT id FROM subtopics " \
                      " WHERE subtopic='{}'".format(subtopic))
            subtopic_id = c.fetchone()[0]
        except:
            subtopic_id = "NULL"
            print("WARNING: no subtopic found.", file=sys.stderr)
        try:
            subsubtopic = MySQLdb.escape_string(topic_table['subsubtopic'])
            # insert new subsubtopic into database if it doesn't exist
            query = "INSERT INTO subsubtopics (subsubtopic, subtopic_id)" \
                    " VALUES ('{}', {})" \
                    " ON DUPLICATE KEY" \
                    " UPDATE subtopic_id=subtopic_id".format(subsubtopic, 
                                                             subtopic_id)
            c.execute(query)
            c.execute("SELECT id FROM subsubtopics " \
                      " WHERE subsubtopic='{}'".format(subsubtopic))
            subsubtopic_id = c.fetchone()[0]
        except:
            subsubtopic_id = "NULL"
            print("WARNING: no subsubtopic found.", file=sys.stderr)

        need_to_parse_topics = False

    query = "INSERT INTO questions (topic_id, subtopic_id, subsubtopic_id," \
            "                       question, correct_answer," \
            "                       answer1, answer2, answer3)" \
            "VALUES ({}, {}, {}, '{}', '{}', '{}', '{}', '{}')".format( \
                        topic_id, subtopic_id, subsubtopic_id,
                        MySQLdb.escape_string(q),
                        MySQLdb.escape_string(correct_answer),
                        MySQLdb.escape_string(answer1),
                        MySQLdb.escape_string(answer2),
                        MySQLdb.escape_string(answer3))
    c.execute(query)


print("\n{} properly formatted question and answer sets "
      "parsed.\n\n".format(numquestions), file=sys.stderr)
